LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
LIBRARY work;
USE work.RV32_pkg.ALL;

ENTITY CONTROL IS
	PORT (
		clock : IN STD_LOGIC;

		opcode : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
		EscrevePCCond : OUT STD_LOGIC;
		EscrevePC : OUT STD_LOGIC;
		IouD : OUT STD_LOGIC;
		EscreveMem : OUT STD_LOGIC;
		LeMem : OUT STD_LOGIC;
		EscreveIR : OUT STD_LOGIC;
		OrigPC : OUT STD_LOGIC;
		ALUOp : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		OrigAULA : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		OrigBULA : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		EscrevePCB : OUT STD_LOGIC;
		EscreveReg : OUT STD_LOGIC;
		Mem2Reg : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
	);
END CONTROL;

ARCHITECTURE arc_CONTROL OF CONTROL IS
	TYPE etapa_tipo IS (FETCH, DECODE, EXECUTE, MEMORYACCESS, WRITEBACK, UNDEFINED);
	TYPE instrucao_tipo IS (TIPOR, LOAD, STORE, BRANCH, JUMP_JAL);
	SIGNAL etapa_atual : etapa_tipo;
	SIGNAL instrucao : instrucao_tipo;
	SIGNAL etapa_proxima : etapa_tipo;
	SIGNAL reset : STD_LOGIC := '1';
BEGIN
	DEF_CLOCK : PROCESS (clock)
	BEGIN
		IF (reset = '1') THEN
			etapa_atual <= FETCH;
			reset <= '0';

		ELSIF (rising_edge(clock)) THEN
			CASE opcode IS
				WHEN "0110011" =>
					instrucao <= TIPOR;
				WHEN "0000011" =>
					instrucao <= LOAD;
				WHEN "0100011" =>
					instrucao <= STORE;
				WHEN "1100011" =>
					instrucao <= BRANCH;
				WHEN "1101111" =>
					instrucao <= JUMP_JAL;
				WHEN OTHERS => NULL;
			END CASE;

			CASE etapa_atual IS
				WHEN FETCH =>
					LeMem <= '1';
					EscreveIR <= '1';
					IouD <= '0';
					OrigAULA <= "00";
					OrigBULA <= "01";
					ALUop <= "00";
					OrigPC <= '0';
					EscrevePC <= '1';
					EscrevePCB <= '1';
					etapa_atual <= DECODE;

				WHEN DECODE =>
					OrigAULA <= "00";
					OrigBULA <= "11";
					ALUop <= "00";

					etapa_atual <= EXECUTE;

				WHEN EXECUTE =>

					CASE instrucao IS -- Verifica o tipo da instrução
						WHEN TIPOR =>
							OrigAULA <= "01";
							OrigBULA <= "00";
							ALUop <= "01";
						WHEN LOAD | STORE =>
							OrigAULA <= "01";
							OrigBULA <= "10";
							ALUop <= "00";
						WHEN BRANCH =>
							OrigAULA <= "01";
							OrigBULA <= "00";
							ALUop <= "01";
							EscrevePCCond <= '1';
							OrigPC <= '1';
						WHEN JUMP_JAL =>
							OrigPC <= '1';
							EscrevePC <= '1';
							EscreveReg <= '1';
							Mem2Reg <= "01";
						WHEN OTHERS => NULL;
					END CASE;

					etapa_atual <= MEMORYACCESS;

				WHEN MEMORYACCESS =>
					CASE instrucao IS
						WHEN TIPOR =>
							EscreveReg <= '1';
							Mem2Reg <= "00";
						WHEN LOAD =>
							IouD <= '1';
							LeMem <= '1';
						WHEN STORE =>
							IouD <= '1';
							EscreveMem <= '1';
						WHEN OTHERS => NULL;

					END CASE;
					etapa_atual <= WRITEBACK;

				WHEN WRITEBACK =>
					Mem2Reg <= "01";
					EscreveReg <= '1';
					reset <= '1';
				WHEN OTHERS => NULL;
			
			
			END CASE;
		END IF;
	END PROCESS;

	
END arc_CONTROL;